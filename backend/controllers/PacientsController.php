<?php

namespace backend\controllers;

use app\rbac\Plan;

use common\helpers\UserHelper;
use common\helpers\HtmldocHelper;
use backend\models\Clinics;
use backend\models\PaymentsItems;
use Faker\Factory;
use Yii;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;
use yii\web\UploadedFile;
use yii\data\ActiveDataProvider;

use backend\models\UploadFile;
use backend\models\Events;
use backend\models\Plans;
use backend\models\Payments;
use backend\models\Pacients;
use backend\models\PacientsSearch;
use backend\models\Orders;
use backend\models\Assign;
use backend\models\Alerts;
use backend\models\User;

/**
 * PacientsController implements the CRUD actions for Pacients model.
 */
class PacientsController extends Controller
{


    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),

            ],
        ];
    }


    public function beforeAction($action)
    {
        if(Yii::$app->user->isGuest){
            return $this->redirect('/site/login');
        }
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /**
     * Lists all Pacients models.
     * @return mixed
     */
    public function actionIndex()
    {

        if(!$user_id = Yii::$app->user->id) {
            $user_id =-1;
        }

        if(!Yii::$app->user->isGuest) {
            $role = Yii::$app->user->identity->role;
        }else{
            $role = NULL;
        }


//echo $user_id . ' ' . $role;
        $searchModel = new PacientsSearch();

        $params = Yii::$app->request->queryParams;
        
        // техникам нужно показывать только их пациентов!, назначенных мед. директором или админом 29.09
        if( $role == 4 || $role ==2  || $role == 3  ) {

            $query = Pacients::find()->where(['>','`orto_pacients`.id','0' ])->joinWith
            (['user', 'level', 'clinic_id']);
            // $searchModel->search($params);

            $dataProvider = new ActiveDataProvider([
                'query' => $query,


            ]);

            $dataProvider->sort->attributes['user'] = [
                // Это те таблицы, с которыми у нас установлена связь
                'asc' => ['orto_user.fullname' => SORT_ASC],
                'desc' => ['orto_user.fullname' => SORT_DESC],
            ];

            $dataProvider->sort->attributes['level'] = [

                'asc' => ['orto_assign.level' => SORT_ASC],
                'desc' => ['orto_assign.level' => SORT_DESC],
            ];
            $dataProvider->sort->attributes['clinic_id'] = [

                'asc' => ['orto_clinics.title' => SORT_ASC],
                'desc' => ['orto_clinics.title' => SORT_DESC],
            ];




        } else if ( $role == 1 ){
            // показать только свои - выбрать связанных пациентов с данным техником
            /* $pacients_id = $assign = Assign::find()->select('pacient_id')->where(['status'=>'1'])->andWhere(['or',
                [ 'level_1_doctor_id' => $user_id ],
                [ 'level_2_doctor_id' => $user_id ],
                [ 'level_3_doctor_id' => $user_id ],
                [ 'level_4_doctor_id' => $user_id ],
                [ 'level_5_doctor_id' => $user_id ],
            ])->all();
             foreach($pacients_id as $item){
                $params['pacient_id'][] = $item->pacient_id;
            }*/
           //  $params['pacient_id'] = Assign::getPacientsByDoctorId($user_id);
        //echo $role . ' ' . $user_id;            print_r($params); exit;
            //$params['pacient_id'] = $pacients_id;
            //$dataProvider = $searchModel->searchByDoctor($params);

            $query = Pacients::find();

            $dataProvider = new ActiveDataProvider([
                'query' => $query,
            ]);


            $clinic_id = isset($_COOKIE['id_clinic']) ? $_COOKIE['id_clinic'] : NULL;
            $query->andWhere(['doctor_id'=>$user_id,'clinic_id'=>$clinic_id]);


        }else if($role == 0 ){

            // поиск нзначенных пациентов по таблице assign
            $assign = Assign::getPacientsByDoctorId($user_id);

            $query = Pacients::find();

            $dataProvider = new ActiveDataProvider([
                'query' => $query,
            ]);

            $query->andWhere(['id'=>$assign]);


        }else{
            $dataProvider = $searchModel->search($params);
        }

        //echo $role . ' ' . $user_id;
        /*$searchModel = new PacientsSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);*/

        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }


    function imageSave($model)
    {


        $path = Yii::getAlias("@backend/web/uploads/pacients/" . $model->id);
        if( ! is_dir( $path )) {
            mkdir( $path );
           // echo '<meta charset="UTF-8">Создание папки: ' .$path ;
        } // создать папку

        /*$img_names[] = $model->img1;
        $img_names[] = $model->img2;
        $img_names[] = $model->img3;
        $img_names[] = $model->img4;
        $img_names[] = $model->img5;
        $img_names[] = $model->img6;
        $img_names[] = $model->img7;
        $img_names[] = $model->img8;*/

        // print_r($img_names);

        $arr  = array_fill(1, 8, '111' );
        foreach($arr as $k => $v) {

            $name ='img'.$k;

            $file = UploadedFile::getInstance($model, $name);
            if($file) {
               // echo 'сохранение файла : '. $file->baseName . '_'. $k . '.' . $file->extension;

                $pathImg = $path . '/'. $file->baseName . '_'. $k . '.' . $file->extension;

                 // @mkdir(dirname($pathImg));

                $file->saveAs($pathImg);
                $model->$name = '/uploads/pacients/'. $model->id . '/' . $file->baseName . '_'. $k . '.' . $file->extension;

                //echo $name . ' = ' . $model->$name . '<br>';
                //$model->{$name} = str_replace($_SERVER['DOCUMENT_ROOT'],'',$pathImg);
                //$model->save();
            } else {
                //echo 'err save file ' .  $name; exit;
//                $post = Yii::$app->request->post();
//                 print_r($post);;die;
//                $model->{$name} = $post['Pacients'][$name];

            }

        }

        if( ! $model->save() ){
            print_r($model->getErrors());
            exit;
        }

        if(count(  $model->getErrors())) {

            Yii::$app->session->setFlash('error', join('', $model->getErrors()));


        }

        return $model;

    }
    
    function imageSave2($model)
    {

        //$path = Yii::getAlias("@backend/web/uploads/pacients/");
        

        //$arr  = array_fill(1, 9, '111' );
       /*oreach($model->fileList as $k => $v) {

            $name ='img9';

            $file = UploadedFile::getInstance($model, $name);
            if($file) {

                $pathImg = $path . $model->id . '/'.$k . $file->baseName . '.' . $file->extension;

                @mkdir(dirname($pathImg));
                $file->saveAs($pathImg);
                $model->{$name} = str_replace($_SERVER['DOCUMENT_ROOT'],'',$pathImg);
                $model->save(); 
            } 

        }

        $model->save();


        if(count(  $model->getErrors())) {

            Yii::$app->session->setFlash('error', join('', $model->getErrors()));
        }*/
    }
    
    public function upload($path, $filename=null)
    {
        
            //vd($this->imageFiles);
			//if(is_dir( $path ) == '' ) mkdir( $path, 0777 );
			
			/*echo $path;
			echo  (int)is_dir($path);
			exit;*/
			
			foreach ($this->imageFiles as $file) {

                if(is_null($filename)){
                    $file->saveAs($path . '/' . $file->baseName . '.' . $file->extension);
                }else{
                    $file->saveAs($path . '/' . $filename . '.' . $file->extension);
                }

                

            }
            return true;
        
    }

    /**
     * Displays a single Pacients model.
     * @param string $id
     * @return mixed
     */
    public function actionView($id)
    {
        return $this->render('update', [
            'model' => $this->findModel($id),
        ]);
    }

    /**
     * Creates a new Pacients model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {

        $role = !empty(Yii::$app->user->identity) ? Yii::$app->user->identity->role : null;
        $user_id = Yii::$app->user->id;
/*

       'roles' => [
       '0' => 'Зубной техник',
       '1' => 'Врач',
       '2' => 'Мед. директор',
       '3' => 'Бухгалтер',
       '4' => 'Админ'   ]
*/
        if( $role != 4 && $role != 1 && $role != 2 )
        {
            return $this->redirect(['index']);
        }

        $model = new Pacients();

        $model->fileList = $this->getFileList($model->id);
        $post = Yii::$app->request->post();
             if ($model->load($post)) {

                 $model->age = strtotime( $post['Pacients']['age'] );
                 $model->date = time(); // дата создания пациента

                 $model->doctor_id = $user_id; // врач создавший пациента
                 //$model->clinics_id = isset($_COOKIE['id_clinic'])?(int)$_COOKIE['id_clinic']:'';


                 $model->date_paid =  isset($post['Pacients']['date_paid']) ? strtotime( $post['Pacients']['date_paid']) : 0;

                 /* if(isset(Yii::$app->session['id_clinic']))
                     $model->clinic_id = Yii::$app->session['id_clinic']; */

                 if(isset($_COOKIE['id_clinic'])) {
                     $model->clinic_id = (int)$_COOKIE['id_clinic'];
                 }


                 if(isset($post['Pacients']['vp_id']))
                     $model->vp_id = $post['Pacients']['vp_id'];

                 //$model->gender = $post['Pacients']['gender'];
                 // $model->status = $post['Pacients']['status'];
                 //$model->age = strtotime($post['Pacients']['age']);
                 //$model->date = strtotime($post['Pacients']['date']);

                 if(isset($post['teeth1']))
                     $formula['teeth1'] = $post['teeth1'];
                 if(isset($post['Formula']))
                     $formula['formula'] = $post['Formula'];
                 if(isset($post['remove']))
                     $formula['remove'] = $post['remove'];
                 if(isset($post['not_moving']))
                     $formula['not_moving'] = $post['not_moving'];
                 if(isset($post['cant_install']))
                     $formula['cant_install'] = $post['cant_install'];
                 if(isset($post['change']))
                     $formula['change'] = $post['change'];
                 if(isset($post['implant']))
                     $formula['implant'] = $post['implant'];
                 if(isset($post['comment']))
                     $formula['comment'] = $post['comment'];

                 $model->formula = json_encode($formula);


             if($model->product_id==1){
                 $validate = true;
             }else{
                 $validate = false;
             }

            if($model->save( $validate )){

                $model = Pacients::findOne($model->id);

//                $model->code = $model->id; // код пациента равен id
//                // файлы видов 1-8
//
//                $model = $this->imageSave($model);
//
//                if( ! is_dir(Yii::getAlias("@backend/web/uploads/pacients/" . $model->id . '/img9'))) {
//                    mkdir(Yii::getAlias("@backend/web/uploads/pacients/" . $model->id . '/img9'));
//                }
//
//                // дополнительные файлы
//                $files = new UploadFile();
//                $files->imageFiles = UploadedFile::getInstances($model, 'img9');
//                if ($files->imageFiles) {
//                    $files->upload(Yii::getAlias("@backend/web/uploads/pacients/" . $model->id.'/img9'));
//                }
//
//                $files10 = new UploadFile();
//                $files10->imageFiles = UploadedFile::getInstances($model, 'img10');
//                if ($files10->imageFiles) {
//                    $files10->upload(Yii::getAlias("@backend/web/uploads/pacients/" . $model->id.'/img9'),'1');
//                }
//
//                $files11 = new UploadFile();
//                $files11->imageFiles = UploadedFile::getInstances($model, 'img11');
//                if ($files11->imageFiles) {
//                    $files11->upload(Yii::getAlias("@backend/web/uploads/pacients/" . $model->id.'/img9'),'2');
//                }

                // события с пациентом
                $event = new Events();
                $event->pacient_id = $model->id;
                $event->event = $model::$EVENT_CREATE; // 0 создание пациента
                $event->date = time();
                $event->text = 'Новый пациент';
                $event->save();



                if ($clinic = $model->doctor->getClinicsByDoctor(true)) {  //  Clinics::find()->where(['id'=>$model->doctor->getClinics()[0]->title])
                    $clinic = Clinics::findOne(['id' => $clinic[0]['click_id']])->title;
                } else {
                    $clinic = '';
                }

                $msg = '<h3>Добавлен новый пациент</h3>Доктор:' . $model->doctor->fullname . '<br><br>Клиника:' . $clinic . '<br><br>Ф.И.О.: ' . $model->name;

                $send_email = true;

                if($send_email) {
                    // 25,11,2016 email  -врача не надо Бухгалтеру вместо него
                    $user = User::find()->where(['role'=>'3'])->one();

                    if ($user->email != '' && !Yii::$app->mailer->compose()
                            ->setFrom(Yii::$app->params['adminEmail'])
                            //->setTo('proger.integratic.1505@gmail.com')
                            ->setTo($user->email)
                            ->setSubject('Добавлен пациент на Ortholiner')
                            ->setHtmlBody($msg)
                            ->send()
                    ) {
                        echo 'Ошибка отправки сообщения на почту: ' . $user->email;
                    }
                }
                /*$test = true;
                if ( $test && ! Yii::$app->mailer->compose()
                        ->setFrom(Yii::$app->params['adminEmail'])
                        ->setTo('detinnov16@yandex.ru')
                        ->setSubject('Добавлен пациент на Ortholiner')
                        ->setHtmlBody($msg)
                        ->send()
                ){
                    echo 'Ошибка отправки сообщения на почту: ' . $user->email;
                }*/

                if ($admins = User::getAdmins()) {


                    //$userPassword = $this->user_data['password'];//UserHelper::createPassword(6); // !!! здесь должен быть сформированный пароль для зарегистрированного пользователя ? ? ?
                    // $userEmail = $this->email;// 'test@test.ru';  // !!! здесь должна быть почта зарегистрированного пользователя ? ? ?
                    foreach ($admins as $admin) {
                        //  echo '['.$admin->email . '] ';
                        // email должен существовать
                        if ($admin->email != '' && !Yii::$app->mailer->compose()
                                ->setFrom(Yii::$app->params['adminEmail'])
                                ->setTo($admin->email)
                                //->setTo('proger.integratic.1505@gmail.com')
                                ->setSubject('Добавлен новый пациент на Ortholiner')
                                ->setHtmlBody($msg)
                                ->send()
                        ) {
                            echo '<meta charset="UTF-8">' . $admin->email;
                        }
                    }
                }

                // return $this->redirect(['update','id'=>$model->id]);
                return $this->redirect(['index']);
            }else{
                echo '<meta charset="UTF-8">';
                print_r($model->getErrors()); exit;
            }


    } else {

            return $this->render('create', [
                'model' => $model,
            ]);
        }



    }



    /**
     * Updates an existing Pacients model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param string $id
     * @return mixed
     */
    public function actionUpdate($id)
    {
        $role =Yii::$app->user->identity->role;
        $user_id = Yii::$app->user->id;

        $model = $this->findModel($id);
        //vd($this->getFileList($model->id));
        $model->fileList = $this->getFileList($model->id);

        // сумма оплаты перед загрузкой новых данных для отслеживания изменений
        $sum_paid_before = $model->sum_paid;
        $post = Yii::$app->request->post();

        if ($model->load($post)) {

            $model->age = strtotime( $post['Pacients']['age'] );

            $model->date_paid =  isset($post['Pacients']['date_paid']) ? strtotime( $post['Pacients']['date_paid']) : 0;

            if(isset($_COOKIE['id_clinic'])) {
                $model->clinic_id = (int)$_COOKIE['id_clinic'];
            }

            if(isset($post['Pacients']['vp_id']))
                $model->vp_id = $post['Pacients']['vp_id'];
            //$model->gender = $post['Pacients']['gender'];
            // $model->status = $post['Pacients']['status'];
            //$model->age = strtotime($post['Pacients']['age']);
            //$model->date = strtotime($post['Pacients']['date']);

            if(isset($post['teeth1']))
                $formula['teeth1'] = $post['teeth1'];
            if(isset($post['Formula']))
                $formula['formula'] = $post['Formula'];
            if(isset($post['remove']))
                $formula['remove'] = $post['remove'];
            if(isset($post['not_moving']))
                $formula['not_moving'] = $post['not_moving'];
            if(isset($post['cant_install']))
                $formula['cant_install'] = $post['cant_install'];
            if(isset($post['change']))
                $formula['change'] = $post['change'];
            if(isset($post['implant']))
                $formula['implant'] = $post['implant'];
            if(isset($post['comment']))
                $formula['comment'] = $post['comment'];

            $model->formula = json_encode($formula);

           // print_r($post); exit;



            // если вариант оплаты Бесплатно , установить сумму равной 0
            // if($model->var_paid==0) $model->sum_paid = 0;

            if( (int)$model->code == 0) $model->code = $model->id; // код пациента равен id

            if($model->product_id==1){
                $validate = true;
            }else{
                $validate = false;
            }

            if($model->save( $validate )){

                // файлы видов 1-8
                $this->imageSave($model);

                if( ! is_dir(Yii::getAlias("@backend/web/uploads/pacients/" . $model->id . '/img9'))) //vd(Yii::getAlias("@backend/web/uploads/pacients/" . $model->id));
                    mkdir(Yii::getAlias("@backend/web/uploads/pacients/" . $model->id .'/img9'));

                // дополнительные файлы
                $files = new UploadFile();
                $files->imageFiles = UploadedFile::getInstances($model, 'img9');
                if ($files->imageFiles) {
                    $files->upload(Yii::getAlias("@backend/web/uploads/pacients/" . $model->id.'/img9'));
                }

                $files10 = new UploadFile();
                $files10->imageFiles = UploadedFile::getInstances($model, 'img10');
                if ($files10->imageFiles) {
                    $files10->upload(Yii::getAlias("@backend/web/uploads/pacients/" . $model->id.'/img9'),'1');
                }

                $files11 = new UploadFile();
                $files11->imageFiles = UploadedFile::getInstances($model, 'img11');
                if ($files11->imageFiles) {
                    $files11->upload(Yii::getAlias("@backend/web/uploads/pacients/" . $model->id.'/img9'),'2');
                }

                // здесь был договор

                if( $role==2 || $role==3 || $role==4 ){

                    // сумма оплаты больше 0 и она не равна предыдущему значению, т.е. была изменена

                    // это СТАРЫЙ БЛОК Функций когда оплата была во вкладках ОПЛАТА - оплата за Виртуальный план
                   /* if( $model->sum_paid > 0 && $model->sum_paid != $sum_paid_before ){

                        // echo 'send msg' ;

                        // внесена оплата
                       $event = new Events();
                        $event->pacient_id = $model->id;
                        $event->event = $model::$EVENT_PAYMENT ;
                        $event->date = time();
                        $event->save();

                        $doctor = User::findOne($user_id);
                        $alert = new Alerts();
                        $alert->doctor_id_from = $user_id; // от техника текущего уровня
                        $alert->doctor_id_to = $model->doctor_id; // доктору пациента
                        $alert->date = time();
                        $res_text = "Произведена оплата для пациента {$model->name}, на сумму {$model->sum_paid}. Следить за историй пациента Вы можете в личном кабинете.<br>С уважением, {$doctor->fullname}";
                        $alert->text = $res_text;
                        $alert->save();

                        if( $admins = User::find()->where(['role'=>4])->all() ) {

                            foreach ($admins as $admin) {

                                $alert = new Alerts();
                                $alert->doctor_id_from = $user_id; // от техника текущего уровня
                                $alert->doctor_id_to = $admin->id; // админу
                                $alert->date = time();

                                $alert->text = $res_text;

                                $alert->save();

                            }

                        }

                    }*/

                }
                //return $this->redirect(['pacients/update', 'id' => $model->id]);
                return $this->redirect(['pacients/index']);

            }else {
                echo '<meta charset="utf-8">';

                print_r([$model->getErrors()]); exit;
            }

        } else {
            $model->fileList = $model->getFileList($model->id);


            return $this->render('update', [
                'model' => $model,
            ]);
        }
    }

    public function actionPay()
    {
        $role = (Yii::$app->user->identity->role!==null) ? Yii::$app->user->identity->role : null;
        $user_id = Yii::$app->user->id;

        $searchModel = new PacientsSearch();

        $params = Yii::$app->request->queryParams;

        if( $role == 2  || $role == 4  || $role == 3) {
            //$dataProvider = $searchModel->search($params);

            $query = Pacients::find();

            $dataProvider = new ActiveDataProvider([
                'query' => $query,
            ]);

            //$query->andWhere(['id'=>]);


        } else {
            // показать только свои заказы
            $clinic_id = isset($_COOKIE['id_clinic']) ? (int)$_COOKIE['id_clinic'] : '';
            $pacients = Pacients::find()->where(['doctor_id'=>$user_id,'clinic_id'=>$clinic_id])->all();
            $params['pacient_id'] = $pacients;

            //print_r($params['pacient_id']) ; exit;
            $dataProvider = $searchModel->searchByDoctor($params);

        }


        return $this->render('pay', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionPrint($id) {

        $pacient = $this->findModel($id);
        $this->layout = 'print';
        $this->view->title = Yii::t('app', 'Print pacient {0}', $pacient->id);


        return $this->render('print', [
            'pacient' => $pacient,
            ]);
    }

    // завершение лечения пациента
    public function actionEnd($id)
    {

        $user_id = Yii::$app->user->id;

        // для всех Payments и заказов Order НЕ нужно устанавливать status = 2 - завершен
        // т.к. они находятся по пациенту. если пациент откл. то они также будут не доступны

        /* if( $payments = Payments::find()->where(['pacient_id'=>$id])->all()){
            foreach($payments as $pay){
                $pay->status = 2; // статус завершения
                $pay->save();
            }
        }*/

        $pacient = $this->findModel($id);

        if ($pacient->status == 0 || $pacient->status == 1) {
            $pacient->status = 2; // статус завершение лечения 2-завершен 1-в процессе 0-не указан
        } else {
            $pacient->status = 0; // отключаем статус
        }

        $pacient->save();

        // отправка сообщений только если статус о завершении лечения
        if( $pacient->status==2 ) {

            $cur_time = time();

            $msg = 'Завершено лечение пациента ' . $pacient->name;

            // события с пациентом
            $event = new Events();
            $event->pacient_id = $pacient->id;
            $event->event = $pacient::$EVENT_END; // завершения пациента
            $event->date = $cur_time;
            $event->text = $msg;

            $event->save();

            if ($admins = User::getAdmins()) {

                foreach ($admins as $admin) {
                    // отправить сообщение админам, что произведено подтверждение оплата заказа на производство
                    $alert = new Alerts();
                    $alert->text = $msg;
                    $alert->date = $cur_time;
                    $alert->doctor_id_from = $user_id;
                    $alert->doctor_id_to = $admin->id; // админу
                    $alert->save();

                    // отправка на почту - email
                    // email должен существовать
                    if ($admin->email != '' && !Yii::$app->mailer->compose()
                            ->setFrom(Yii::$app->params['adminEmail'])
                            ->setTo($admin->email)
                            ->setSubject('Завершено лечение пациента на Ortholiner')
                            ->setHtmlBody($msg)
                            ->send()
                    ) {
                        echo 'Ошибка отправки сообщения на почту: ' . $admin->email;
                    }
                }
            }
        }

        return $this->redirect(['pacients/update', 'id' => $id]);
    }

    /**
     * Deletes an existing Pacients model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param string $id
     * @return mixed
     */
    public function actionDelete($id)
    {

        $role = Yii::$app->user->identity->role;
        $model = $this->findModel($id);
        if($role = 4 || $model->doctor_id == Yii::$app->user->identity->id) {

            $model->delete();
        }


        return $this->redirect(['index']);
    }

    /**
     * Finds the Pacients model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param string $id
     * @return Pacients the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = Pacients::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }
    
    public function getFileList($id){
        $files = [];
        $path = Yii::getAlias("@backend/web/uploads/pacients/" . $id.'/img9');
        if(is_dir($path)) {
            $dh = opendir($path);
            while (false !== ($filename = readdir($dh))) {
                if ($filename != '.' && $filename != '..') $files[] = $filename;
            }
            return $files;
        }
        return '';

    }

    // назначение техников админом и управление уровнем level техниками.
    // техники последовательно задают статус Принят+1 Возврат -1 и сообщение
    //

    public function actionAssign($id)
    {

        $role = (Yii::$app->user->identity->role!==null) ? Yii::$app->user->identity->role : null; // роль админ или техник

        $user_id = Yii::$app->user->id; // тек. пользователь админ или техник

        //$searchModel = new PacientsSearch();

        $pacient = $this->findModel($id);

        if( ! $assign = Assign::find()->where(['pacient_id'=>$id,'status'=>'0'])->one() ) {
            $assign = new Assign();
            //$date_field = 'level_1_date';
            $assign->level_1_date = date('d-m-Y H:i:s',time()); // дата создания - назначения
            // $assign->status = 1; // включен в обработку
            // $assign->level = 1; // уровень 1
        }



        $post = Yii::$app->request->post();
        // print_r($post); exit;
        //print_r($assign);

        // назначенные техники или пусто до загрузки из формы, нужно для сравнения
        $assign_doctors = [];
        for ($t=1; $t<=5; $t++){
            $level_doctor = 'level_' . $t . '_doctor_id';
            $assign_doctors[$t] = $assign->$level_doctor ;
        }

        if( $assign->load($post) ){ // авто задание техников из формы
            $assign->pacient_id = $id;
            $level = $assign->level == 0 ? 1 : $assign->level; // 0 - не задан
            $assign->level = $level;
            $doctor_level = 'level_' . $level . '_doctor_id';

            //for ( $i=$level; $i<6; $i++ ) {
            //    if ($assign->$doctor_level == $pacient->doctor_id ) {
            //        $assign->level = $i; // установка текущего уровня
            //        break;
            //    }
            //}
            $alert = new Alerts();
            $alert->doctor_id_from = ( $role == 0 ) ?  $assign->$doctor_level : $user_id; // техник текущего уровня задает статус или админ назначает техника
            $alert->doctor_id_to = $pacient->doctor_id; // доктору пациента
            $alert->date = time();

            if($role==0) {
                $doctor = User::findOne($assign->$doctor_level); // техник
            }else{
                $doctor = User::findOne($user_id); // админ
            }

            $status = 'level_' . $level . '_status';
            $result = 'level_' . $level . '_result';

            //echo $level; $assign->status;
            // echo $post['Assign'][$status];
            //exit;

            //echo $result . ' x ' . $assign->$result; exit;
            if($role==0) { // техник устанавливает статус
                if ((int)$post['Assign'][$status] == 1) {
                    $assign->$status = 1;
                    $msg = "Здравствуйте, Уважаемый(ая) " . $pacient->doctor->fullname . "<br>Диагностический материал пациента {$pacient->name} принят.<br>Следить за историей пациента Вы можете в личном кабинете.<br>С уважением, {$doctor->fullname}.<hr><br><br>Комментарии:<br>" . $assign->$result;
                    $alert->text = $msg;
                    $pacient_event = $pacient::$EVENT_TEHNIK_SUCCESS;
                    if ($level + 1 <= 5) $assign->level = $level + 1; // следующий уровень, для следующего техника
                    // когда последняя доставка завершена, нужно установить статус в 1 это в delivery для техника level 5

                } else {
                    $assign->$status = 2; // материал отклонен
                    $msg = "Здравствуйте, Уважаемый(ая) " . $pacient->doctor->fullname . "<br>Диагностический материал пациента {$pacient->name} НЕ принят, так как он не соответствует критериям и требует повторного предоставления.<br>С уважением, {$doctor->fullname}.<hr><br><br>Комментарии:<br>" . $assign->$result;
                    $alert->text = $msg;
                    $pacient_event = $pacient::$EVENT_TEHNIK_ERROR;
                    if ($level - 1 > 0) $assign->level = $level - 1; // предыдущий уровень, для предыдующего техника
                }

                // события диагностического материала
                if ($tehnik = User::findOne($assign->$doctor_level)) {

                    $event = new Events();
                    $event->pacient_id = $pacient->id;
                    $event->event = $pacient_event;
                    $event->date = time();
                    $event->text = $msg;

                    $event->save(); // test

                }

                $send_email = true;
                
                if($send_email) {
                    // email врача
                    $user = User::findOne($pacient->doctor_id);

                    //echo $user->email . ' ' . $msg; exit;

                    if ($user->email != '' && !Yii::$app->mailer->compose()
                            ->setFrom(Yii::$app->params['adminEmail'])
                            ->setTo($user->email)
                            ->setSubject('Диагностичекий материал на Ortholiner')
                            ->setHtmlBody($msg)
                            ->send()
                    ) {
                        echo 'Ошибка отправки сообщения на почту: ' . $user->email;
                    }
                }

                 /* if ($admins = User::getAdmins()) {

                    foreach ($admins as $admin) {
                        // email должен существовать


                        if ($admin->email != '' && !Yii::$app->mailer->compose()
                                ->setFrom(Yii::$app->params['adminEmail'])
                                ->setTo($admin->email)
                                ->setSubject('Диагностичекий материал на Ortholiner')
                                ->setHtmlBody($msg)
                                ->send()
                        ) {
                            echo '<meta charset="UTF-8">' . $admin->email;
                        }
                    }
                } */

            }else{ // админ задает техника-ов - нужно их оповестить о назначении
                // Нужно смотреть какие техники были добавлены, т.к. сразу задется несколько техников
                // видимо нужно выдать список техников уровней 1-5 заданных в форме
                $user_fullname = Yii::$app->user->identity->fullname;

                for ($t=1; $t<=5; $t++){
                    $level_doctor = 'level_' . $t . '_doctor_id';
                    // существует и не равен новому значению, значит назначен новый техник
                    if( isset($assign->$level_doctor) && $assign->$level_doctor != '' && $assign->$level_doctor != $assign_doctors[$t] ) {
                        $msg = "Вы назначены техником уровня {$t} для пациента {$pacient->name}.<br>С уважением, {$user_fullname}.";

                        $alert = new Alerts();
                        $alert->doctor_id_from = $user_id; // от админа или мед.дир.
                        $alert->doctor_id_to = $assign->$level_doctor; // технику текущего уровня
                        $alert->date = time();
                        $alert->text = $msg;
                        $alert->save();

                       if( $tehnik = User::findOne($assign->$level_doctor) ) {

                           $event = new Events();
                           $event->pacient_id = $pacient->id;
                           $event->event = $pacient::$EVENT_ASSIGN_TEHNIK; // назначен техник
                           $event->date = time();
                           $event->text = "Назначен техник {$tehnik->fullname} для уровня {$t}.";

                           $event->save();
                       }
                        // email техников
                        $user = User::findOne($assign->$level_doctor); // техник

                        if ($user->email != '' && !Yii::$app->mailer->compose()
                                ->setFrom(Yii::$app->params['adminEmail'])
                                ->setTo($user->email)
                                ->setSubject('Назначение техника на Ortholiner')
                                ->setHtmlBody($msg)
                                ->send()
                        ) {
                            echo 'Ошибка отправки сообщения на почту: ' . $user->email;
                        }
                    }
                }

            }

            if ( ! $assign->save() ) {
                echo 'BAD no save';
                exit;
            }else{

                $alert->save();

                // также всем админам должно прийти уведомление о принятии нового пациента техником!
                // возможно мед. директорам тоже, но в ТЗ указано админам!
                if($role==0) {
                    if ($admins = User::find()->where(['role' => 4])->all()) {

                        foreach ($admins as $admin) {

                            $alert = new Alerts();
                            $alert->doctor_id_from = $assign->$doctor_level; // от техника текущего уровня
                            $alert->doctor_id_to = $admin->id; // админу
                            $alert->date = time();
                            $alert->text = $msg;
                            $alert->save();

                        }

                    }
                }

                return $this->redirect('index');

            }
            
        }

        return $this->render('assign', [
            'pacient' => $pacient,
            'model' => $assign,
        ]);

    }
    
    public function actionPlanGraph($id, $layout='' )
    {

        if($layout!='') $this->layout = $layout;
        $cur_time = time();

        $role = (Yii::$app->user->identity!==null) ? Yii::$app->user->identity->role : null;
        $user_id = Yii::$app->user->id;

        $model = $this->findModel($id);

        if( $plan_graph = Payments::find()->where(['pacient_id'=>$id, 'order_id'=>$model->order_id])->one() ){
            // получить все элементы план графика
            $plan_items = PaymentsItems::find()->where(['payment_id'=>$plan_graph->id])->all();
        }else{
            $plan_graph = new Payments();
            $plan_items = [];
        }


        // старая сумма оплаты для проверки изменения до использования $plan_graph->load
        $old_sum_paid_vp = $plan_graph->sum_paid_vp;
        $var_paid_changed = $plan_graph->var_paid_vp;

        $post = Yii::$app->request->post();

        $msg = '';
        $msg_to_doctor = false;

        // текущая сумма за ВП
        // $pg_vp_paid =  $plan_graph->sum_paid_vp;

		// нужно проверить массив Post при входе в план-график


        // если нажато сохранить
        if( $plan_graph->load($post) ) {


            //echo '<pre>'; print_r($post);exit;
            // сохранение договора
            $file = UploadedFile::getInstance($model, 'dogovor');

            if($file) {
                //print_r($file->baseName); die;

                $path = Yii::getAlias("@backend/web/uploads/pacients/" . $model->id .'/dogovor');
               // создать папку, если нет
                if(!is_dir($path)) mkdir($path);

                if ( ! is_null($model->dogovor) && $model->dogovor != '' ){
                    // удалить старый файл договора
                    @unlink($path . '/' . $model->dogovor );
                }

                $pathImg =  $path . '/' . $file->baseName . '.' . $file->extension;

                $file->saveAs($pathImg);

                $model->dogovor = $file->baseName . '.' . $file->extension; // str_replace($_SERVER['DOCUMENT_ROOT'],'',$pathImg);

                if( !$model->save() ){
                    echo '<meta charset="utf-8">';
                    echo 'bad save pacient model';
                    print_r($model->getErrors());
                    exit;
                }

            } // сохранение договора


            if(isset( $post['Payments']['date_downpay']) ) $plan_graph->date_downpay = date('Y-m-d',strtotime($post['Payments']['date_downpay'])) ;
            
            if( $pay_items = PaymentsItems::find()->where(['payment_id'=>$plan_graph->id])->all() ) {
               // нет данных в бд для изменения
               // может быть задано одновременно несколько новых дат и сумм к оплате
               //print_r($post);
               //echo (int)$post['PaymentsItemsNew'][33]['date'] =='' ;//gettype(  $post['PaymentsItemsNew'][33]['date'] );
               //exit;
               foreach ($pay_items as $item) {
                   if( $role == 2 || $role == 4 ){
                       if ( isset($post['PaymentsItemsNew'][$item->id]['date']) && $post['PaymentsItemsNew'][$item->id]['date'] != '' ) {
                            $item->date = date('Y-m-d', strtotime($post['PaymentsItemsNew'][$item->id]['date']));
                           $item->sum = $post['PaymentsItemsNew'][$item->id]['sum'];
                        }else{
                           //  поле дата есть, но значение не указано, УДАЛИТЬ!
                           $item->delete();
                        }
                   }
                   // оплата за дату в план-графике от бухгалтера
                   if ($role == 3 || $role ==2 || $role==4) {
                       // подтверждена оплата от бухгалтера
                       if ( isset($post['PaymentsItemsNew'][$item->id]['status_paid']) ) { // еще не было оплачено

                           if( (int)$post['PaymentsItemsNew'][$item->id]['status_paid'] == 1 ) {

                               $item->status_paid = (int)$post['PaymentsItemsNew'][$item->id]['status_paid']; // это задается бухгалтером

                               //echo $item->id . ' ' . $item->status_paid ;
                               // Имя бухгалтера
                               $buh = User::find()->where(['role' => '3'])->one();
                               // $msg = 'Подтверждена оплата на дату ' . $item->date . ' на сумму ' . $item->sum . ' от бухгалтера: ' . User::findOne($user_id)->fullname;
                               $msg = 'Здравствуйте, Уважаемый(-ая) ' . $model->doctor->fullname . '!.<br>Поступила оплата для пациента ' . $model->name . '.<br>С уважением, ' . $buh->fullname;

                               $msg_to_doctor = true;
                           }else{
                               $item->status_paid = 0;
                           }

                       }

                   }
                   $item->save();

               }

              //  exit;
            }
            // добавлена новая дата оплаты
            // нижний блок будет работать только для АДМИНА
            if( isset($post['PaymentsItemsNew']['new']['date']) && $post['PaymentsItemsNew']['new']['date'] !='' ) {
                $count = count($post['PaymentsItemsNew']['new']['date']);

                // добавление новых дат, предполагается 1 новая дата
                for ($i = 0; $i < $count; $i++) {
                    $pay_item = new PaymentsItems();
                    $pay_item->payment_id = $plan_graph->id;
                    $pay_item->date = date('Y-m-d', strtotime($post['PaymentsItemsNew']['new']['date'][$i]));
                    $pay_item->sum = $post['PaymentsItemsNew']['new']['sum'][$i];
                    $pay_item->status = 0; // задается техником 5 при отправке
                    $pay_item->counts = 0; // кол-во для доставки на данную дату - это задается техником 5 при доставке
                    $pay_item->status_paid = 0; // это задается бухгалтером
                    $pay_item->type_paid = 0; // это задается бухгалтером
                    $pay_item->save();
                }

            }

        // оплата за ВП
        $paid_vp = false;
        // проверка оплаты за ВП от бухгалтера,
        // если суммы отличаются, значит произведена оплата за ВП
        if( $role == 3 && $plan_graph->status_paid_vp == 1 && $plan_graph->sum_paid_vp>0 &&  $plan_graph->sum_paid_vp !=$old_sum_paid_vp ){ //$pg_vp_paid != $plan_graph->sum_paid_vp ){
            $msg = 'Произведена оплата за Виртуальный план для пациента ' . $model->name . ' на сумму '. $plan_graph->sum_paid_vp;
            $msg_to_doctor = true;
            $plan_graph->date_paid_vp = date('Y-m-d',time()); // дата оплаты за вп
            $paid_vp = true;
        }
        if( $var_paid_changed != $plan_graph->var_paid_vp || ( $plan_graph->var_paid_vp == 2 && $plan_graph->date_paid_vp =='' ) ){
            // если статус варианта оплаты изменился ИЛИ статус равен бесплатно а дата не внесена
            $plan_graph->date_paid_vp = date('Y-m-d',time()); // дата оплаты за вп


            // если $var_paid_changed - изменился на 1- платно
            if( $plan_graph->var_paid_vp == 1 ){

                $_msg = 'Вам необходимо подтвердить оплату за создание виртуального плана для пациента ' . $model->name . '.<br>С уважением, Кидиралиева Зарина.';

                // отправка email бухгалтеру, если выбрано платно ВП var_paid_vp в payments
                $user = User::find()->where(['role'=>'3'])->one();

                if ($user->email != '' && !Yii::$app->mailer->compose()
                        ->setFrom(Yii::$app->params['adminEmail'])
                        ->setTo($user->email)
                        ->setSubject('Подтверждение оплаты за виртуальный план на Ortholiner')
                        ->setHtmlBody($_msg)
                        ->send()
                ) {
                    echo 'Ошибка отправки сообщения на почту: ' . $user->email;
                }

            }

        }


        if($msg!='') {
            // сообщение об изменении плана графика пациента

            if($role==3 && $msg_to_doctor) {

                // сообщение доктору пациента об оплате
                $alert = new Alerts();
                $alert->doctor_id_from = $user_id; // от текущего пользователя
                $alert->doctor_id_to = $model->doctor_id; // доктору пациента
                $alert->date = $cur_time;
                $alert->text = $msg;
                $alert->save();

                if(!$paid_vp) { // если не оплата за ВП
                    // события с пациентом
                    $event = new Events();
                    $event->pacient_id = $model->id;
                    $event->event = $model::$EVENT_PAYMENT; // оплата пациента
                    $event->date = $cur_time;
                    $event->text = $msg;

                    $event->save();
                }

                $send_email = true;

                if($send_email) {
                    // email врача
                    $user = User::findOne($model->doctor_id);

                    if ($user->email != '' && !Yii::$app->mailer->compose()
                            ->setFrom(Yii::$app->params['adminEmail'])
                            ->setTo($user->email)
                            ->setSubject('Подтверждение оплаты на Ortholiner')
                            ->setHtmlBody($msg)
                            ->send()
                    ) {
                        echo 'Ошибка отправки сообщения на почту: ' . $user->email;
                    }

                    if( $tehnik = Assign::find()->where(['pacient_id'=>$id])->one() ) {
                        // поиск назначенного техника для пациента на данном уровне
                        $tehnik_id = $tehnik->{'level_' . $tehnik->level . '_doctor_id'};

                        // email техника
                        $user = User::findOne($tehnik_id);
                        $_msg = 'Оплата за создание Виртуального плана для пациента ' . $model->name . ' подтверждена.';
                        if ($user->email != '' && !Yii::$app->mailer->compose()
                                ->setFrom(Yii::$app->params['adminEmail'])
                                ->setTo($user->email)
                                ->setSubject('Подтверждение оплаты на Ortholiner')
                                ->setHtmlBody($_msg)
                                ->send()
                        ) {
                            echo 'Ошибка отправки сообщения на почту: ' . $user->email;
                        }
                    }else{
                        // echo  'пациент не найден!';
                    }


                }


                if ($admins = User::getAdmins()) {

                    foreach ($admins as $admin) {
                        // отправить сообщение админам, что произведено подтверждение оплаты заказа на производство
                        $alert = new Alerts();
                        $alert->text = $msg;
                        $alert->date = $cur_time;
                        $alert->doctor_id_from = $user_id;
                        $alert->doctor_id_to = $admin->id; // админу
                        $alert->save();

                        // отправка на почту - email
                        // email должен существовать
                        if ( $admin->email !='' && ! Yii::$app->mailer->compose()
                                ->setFrom(Yii::$app->params['adminEmail'])
                                ->setTo($admin->email)
                                ->setSubject('Подтверждение оплаты на Ortholiner')
                                ->setHtmlBody($msg)
                                ->send()
                        ){
                            echo 'Ошибка отправки сообщения на почту: ' . $admin->email;
                        }
                    }
                }

            }else if($role==2 || $role==4){
                // события и сообщения при создании админом новой  даты


            }

        }


            if( $plan_graph->var_paid_vp==2) { // бесплатно ВП
                    $plan_graph->sum_paid_vp = 0;
                    $model->vp_enable = 1; // разрешить создание ВП
                    $model->save();

                // нужно чтобы о срздании виртуального плага пришло
                // врачу и мед диру


            }else{ // платно за ВП
                // сумма не задана для ВП
                if($plan_graph->status_paid_vp == 0 ) {
                    $model->vp_enable = 0; // запретить создание ВП
                    $model->save();
                }else{ // оплачено
                    $model->vp_enable = 1; // разрешить создание ВП т.к. внесена сумма
                    $model->save();
                }
            }

            // 12.01.2017
                /* if ($paket = Plans::getTarifPlanByPacient($model->id)) {
                    $paket_id = $paket['id'];
                } else {
                    $paket_id = 0;
                }
                $plan_graph->paket_id = $paket_id;*/
            // 12.01.2017

            if( ! $plan_graph->save() ){
                echo '<meta charset="utf-8">';
                echo 'bad save plan graf';
                print_r($plan_graph->getErrors());
                exit;
            }

            // return $this->redirect(['pacients/plan-graph','id'=>$id]);

            return $this->redirect(['index']);
            
    }else if($plan_graph->isNewRecord) {    // первый раз - создание или вход

            if ($paket = Plans::getTarifPlanByPacient($model->id)) {
                $paket_id = $paket['id'];
            } else {
                $paket_id = 0;
            }

            $plan_graph->order_id = $model->order_id;
            $plan_graph->pacient_id = $id;
            $plan_graph->paket_id = $paket_id;
            if (!$plan_graph->save()) {
                echo 'err save pg';
                exit;
            }

            $buh = User::find()->where(['role' => '3'])->one();
            // сообщения врачу и бухгалтеру
            // о создании план графика для пациента id
            $msg = '';

            // сообщения врачу и бухгалтеру при создании ПЛАН-ГРАФИКА
            // о создании план графика для пациента id
            if ($plan_graph->var_paid == 1) { // рассрочка
                $msg = 'Здравствуйте, Уважаемый(-ая) ' . $model->doctor->fullname . '!.<br>График оплаты по частям подготовлен для пациента ' . $model->name . '<br>Ознакомиться с ним вы можете в личном кабинете.<br>С уважением, ' . $buh->fullname;
                $email_title = 'Оплата по частям';
            } elseif ($plan_graph->var_paid == 2) { // полная
                $msg = 'Здравствуйте, Уважаемый(-ая) ' . $model->doctor->fullname . '!.<br>Поступила оплата для пациента ' . $model->name . '.<br>С уважением, ' . $buh->fullname;
                $email_title = 'Подтверждение оплаты на Ortholiner';
            }


            if ($msg != '') { // если нет сообщения не отправлять
                // сообщение врачу пациента
                $alert = new Alerts();
                $alert->doctor_id_from = $user_id; // от текущего пользователя
                $alert->doctor_id_to = $model->doctor_id; // доктору пациента
                $alert->date = $cur_time;
                $alert->text = $msg;
                $alert->save();

                // сообщение бухгалтеру
                if ($user = User::find()->where(['role' => '3', 'status' => '1'])->one()) {
                    $alert = new Alerts();
                    $alert->doctor_id_from = $user_id; // от текущего пользователя
                    $alert->doctor_id_to = $user->id; // доктору пациента
                    $alert->date = $cur_time;
                    $alert->text = $msg;
                    $alert->save();

                    // отправка email бухгалтеру
                    if ($user->email != '' && !Yii::$app->mailer->compose()
                            ->setFrom(Yii::$app->params['adminEmail'])
                            ->setTo($user->email)
                            ->setSubject($email_title)
                            ->setHtmlBody($msg)
                            ->send()
                    ) {
                        echo 'Ошибка отправки сообщения на почту: ' . $user->email;
                    }

                } else {
                    // нет бухгалтеров
                }

                // события с пациентом
                $event = new Events();
                $event->pacient_id = $model->id;
                $event->event = $model::$EVENT_PLAN_CREATE; // создан Вирт План для пациента
                $event->date = $cur_time;
                $event->text = $msg;
                $event->save();

                $send_email = true;

                if ($send_email) {
                    // отправка email врачу
                    $user = User::findOne($model->doctor_id);

                    //$msg = 'Здравствуйте, Уважаемый(-ая) ' . $user->fullname . '!.<br>Создан план-график оплаты для пациента ' . $model->name;


                    if ($user->email != '' && !Yii::$app->mailer->compose()
                            ->setFrom(Yii::$app->params['adminEmail'])
                            ->setTo($user->email)
                            ->setSubject('Подтверждение оплаты на Ortholiner')
                            ->setHtmlBody($msg)
                            ->send()
                    ) {
                        echo 'Ошибка отправки сообщения на почту: ' . $user->email;
                    }
                }
            } // если есть сообщение

        } // load

        if($layout == 'print'){
            return $this->render('plan-graf-print', [
                'model' => $model,
                'plan_graph' => $plan_graph,
                'plan_items' => $plan_items,
            ]);
        }else {
            return $this->render('plan-graf', [
                'model' => $model,
                'plan_graph' => $plan_graph,
                'plan_items' => $plan_items,
            ]);
        }

    }
    
    public function actionDownload($file) {
        $mimetype='application/octet-stream';
        $id = Yii::$app->request->get('id');
        $filename = Yii::getAlias("@backend/web/uploads/pacients/".$id.'/img9') . '/' . $file;
        if (!file_exists($filename) ) return 'Файл не найден';

        header('HTTP/1.1 200 Ok');

        $etag=md5($filename);
        $etag=substr($etag, 0, 8) . '-' . substr($etag, 8, 7) . '-' . substr($etag, 15, 8);
        header('ETag: "' . $etag . '"');

        header('Accept-Ranges: bytes');
        header('Content-Length: ' . (filesize($filename)));

        header('Connection: close');
        header('Content-Type: ' . $mimetype);
        header('Last-Modified: ' . gmdate('r', filemtime($filename)));
        header('Content-Disposition: attachment; filename="' . basename($filename) . '";');
        echo file_get_contents($filename);
        return 0;
    }
    public function actionDownloadDogovor($id) {
        $mimetype='application/octet-stream';
        //$id = Yii::$app->request->get('id');
        if( ! $pacient = Pacients::findOne($id) )return 'Пациент не найден ' . $id;

        $filename = Yii::getAlias("@backend/web/uploads/pacients/".$id.'/dogovor/') . $pacient->dogovor;
        if ( ! file_exists($filename) ) return 'Файл не найден ' . $pacient->dogovor;


        header('HTTP/1.1 200 Ok');

        $etag=md5($filename);
        $etag=substr($etag, 0, 8) . '-' . substr($etag, 8, 7) . '-' . substr($etag, 15, 8);
        header('ETag: "' . $etag . '"');

        header('Accept-Ranges: bytes');
        header('Content-Length: ' . (filesize($filename)));

        header('Connection: close');
        header('Content-Type: ' . $mimetype);
        header('Last-Modified: ' . gmdate('r', filemtime($filename)));
        header('Content-Disposition: attachment; filename="' . basename($filename) . '";');
        echo file_get_contents($filename);
        return 0;
    }
    public function actionDeleteDogovor($id) {

        if( $model = Pacients::findOne($id) ) {

            $path = Yii::getAlias("@backend/web/uploads/pacients/" . $model->id . '/dogovor');

            if ( ! is_null($model->dogovor) && $model->dogovor != '') {
                // удалить старый файл договора
                @unlink($path . '/' . $model->dogovor);
                $model->dogovor = '';
                $model->save();
            }
            return $this->redirect('/pacients/plan-graph?id=' . $model->id);
        }
        return $this->redirect('/pacients/pay');

    }

    public function actionDeleteFile()
    {
        $role = Yii::$app->user->identity->role;
        //if( $role == 2 || $role ==4 ) {
            // только админ или мед.дир может управлять баннерами
            $id = Yii::$app->request->get('id');
            $file = Yii::$app->request->get('file');
            $path = Yii::getAlias("@backend/web/uploads/pacients/" . $id . '/img9/' . $file);

            if (is_file($path)) unlink($path); // удаление файла
        //}
        return $this->redirect(['/pacients/update','id'=>$id]);
    }

   /* public function actionDownloadPlanGraph($id=145){

        // подключим файл
        //include( 'html_to_doc.inc.php' );

        // конструируем экземпляр
        //$file = new  HTML_TO_DOC();

       // echo UserHelper::createPassword();
       // exit;


        $file = new HtmldocHelper();
        //echo $id;
        // конвертим url
        //$file->createDocFromURL( "http://doctors.ortholiner.kz/pacients/plan-graph?id=" . $id, "output", true );

        // либо файл на диске
        //$file->createDoc( "somefile.html", "output_loc", true );
        $pacient = Pacients::findOne($id); // код пациента

        $html = $this->actionPlanGraph($id, 'print');

        // $html = $this->generatePlanGraph($id);

            //$id . ' hello world! ' . $pacient->code;
        $file->createDocFromHtml( $html, "plan_graf_" . $pacient->code , true );

        //На выходе имеем в первом случае файл output.doc который предложит загрузиться (за это отвечает третий параметр, его можно не писать - по умолчанию false, т.е. по умолчанию файл сохранится в директории в которой лежит скрипт), и во втором случае output_loc.doc который тоже предложит быть скаченным.
    }*/



}
